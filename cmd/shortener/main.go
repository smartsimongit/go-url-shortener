package main

import (
	"github.com/gorilla/mux"
	"go-url-shortener/internal/server"
	"go-url-shortener/internal/storage"
	"log"
	"net/http"
)

func main() {
	storage := storage.NewInMemory()
	router := mux.NewRouter()
	server := server.New(storage)
	router.HandleFunc("/{id}", server.GetHandler)
	router.HandleFunc("/", server.PostHandler)
	log.Fatal(http.ListenAndServe(":8080", router))
}

//Задание для трека «Сервис сокращения URL»
//Напишите сервис для сокращения длинных URL. Требования:
//Сервер должен быть доступен по адресу: http://localhost:8080.
//Сервер должен предоставлять два эндпоинта: POST / и GET /{id}.
//Эндпоинт POST / принимает в теле запроса строку URL для сокращения и возвращает ответ с кодом 201 и сокращённым URL в виде текстовой строки в теле.
//Эндпоинт GET /{id} принимает в качестве URL-параметра идентификатор сокращённого URL и возвращает ответ с кодом 307 и оригинальным URL в HTTP-заголовке Location.
//Нужно учесть некорректные запросы и возвращать для них ответ с кодом 400.

//Покройте сервис юнит-тестами. Сконцентрируйтесь на покрытии тестами эндпоинтов, чтобы защитить API сервиса от случайных изменений.
//ошибки стораджа

//Вы написали приложение с помощью стандартной библиотеки net/http. Используя любой пакет (роутер или фреймворк), совместимый с net/http, перепишите ваш код.
//Задача направлена на рефакторинг приложения с помощью готовой библиотеки.
//Обратите внимание, что необязательно запускать приложение вручную: тесты, которые вы написали до этого, помогут вам в рефакторинге.
